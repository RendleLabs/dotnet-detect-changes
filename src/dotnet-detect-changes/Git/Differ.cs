using LibGit2Sharp;

namespace RendleLabs.DetectChanges.Git;

public static class Differ
{
    public static HashSet<string>? GetChangedFiles(string projectDirectory)
    {
        var repoRoot = Repository.Discover(projectDirectory);

        if (repoRoot is not { Length: > 0 })
        {
            throw new Exception("Not a Git repo");
        }

        var repository = new Repository(repoRoot);
        
        var changes = GetChanges(repository);

        if (changes is null) return null;

        var rootDirectory = Path.GetDirectoryName(repoRoot.TrimEnd('/', '\\'))!;
        var comparer = FileSystemIsCaseSensitive(rootDirectory) ? StringComparer.CurrentCulture : StringComparer.CurrentCultureIgnoreCase;
        var files = new HashSet<string>(comparer);
        
        foreach (var change in changes)
        {
            files.Add(Path.Combine(rootDirectory, PathHelper.FixSeparator(change.Path)));
        }

        return files;
    }

    private static TreeChanges? GetChanges(Repository repository)
    {
        if (TryGetGithubActionsRefs(out var baseRef, out var headRef))
        {
            var baseTree = repository.Branches[baseRef].Tip.Tree;
            var headTree = repository.Branches[headRef].Tip.Tree;

            return repository.Diff.Compare<TreeChanges>(baseTree, headTree);
        }
        
        using var enumerator = repository.Commits.GetEnumerator();
        var latest = enumerator.MoveNext() ? enumerator.Current : null;

        if (latest is null) return null;

        var previous = enumerator.MoveNext() ? enumerator.Current : null;

        if (previous is null) return null;

        // This is a working commit generated by GitHub Actions PR processing
        if (latest.Message.StartsWith($"Merge {previous.Sha} into "))
        {
            latest = previous;
            previous = enumerator.MoveNext() ? enumerator.Current : null;
            if (previous is null) return null;
        }
        
        return repository.Diff.Compare<TreeChanges>(latest.Tree, previous.Tree);
    }

    private static bool TryGetGithubActionsRefs(out string? baseRef, out string? headRef)
    {
        baseRef = Environment.GetEnvironmentVariable("GITHUB_BASE_REF");
        headRef = Environment.GetEnvironmentVariable("GITHUB_HEAD_REF");
        return baseRef is { Length: > 0 } && headRef is { Length: > 0 };
    }

    /// <summary>
    /// Test whether the file-system containing a directory is case-sensitive
    /// </summary>
    /// <param name="projectDirectory"></param>
    /// <returns></returns>
    public static bool FileSystemIsCaseSensitive(string projectDirectory)
    {
        var guid = Guid.NewGuid();
        var filePath = Path.Combine(projectDirectory, $"TMP{guid:N}.tmp");
        var testPath = Path.Combine(projectDirectory, $"tmp{guid:N}.TMP");
        try
        {
            File.WriteAllText(filePath, " ");
            return !File.Exists(testPath);
        }
        finally
        {
            File.Delete(filePath);
        }
    }
}